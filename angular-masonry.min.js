"use strict";angular.module("ngMasonry",[]).service("masonryService",function(){this.config={},this.container=void 0,this.ready=void 0,this.initialize=void 0,this.reLayout=void 0,this.setup=function(n,t,r,i){this.config=n,this.container=t,this.ready=r,this.initialize=i},this.reLayout=function(){this.container&&this.container.layout()}}).controller("masonryController",["masonryService",function(n){function t(){return!!o.config&&!!o.config.masonryContainer}function r(){var t={itemSelector:o.config.masonryItem},r=o.config.masonryOption?angular.extend(t,o.config.masonryOption):t;o.container=new Masonry(o.config.masonryContainer,r),n.setup(o.config,o.container,o.ready,o.initialize,o.reLayout)}function i(){o.container.layout()}var o=this;o.config={},o.container=void 0,o.ready=t,o.initialize=r,o.reLayout=i}]).directive("masonry",function(){function n(n,t){var r=!1,i=angular.element(document.querySelectorAll("["+t.$attr.masonry+"] [data-masonry-item], ["+t.$attr.masonry+"] [masonry-item]"));return angular.forEach(i,function(n){n=angular.element(n),(void 0!==n.attr("ng-repeat")||void 0!==n.attr("data-ng-repeat"))&&(r=!0,n.attr("data-masonry-after-render",""))}),{pre:function(n,t,r,i){i.config.masonryContainer="["+r.$attr.masonry+"]",i.config.masonryOptions=JSON.parse(r.masonryOptions||"{}")},post:function(n,t,i,o){r||o.initialize()}}}var t={restrict:"A",controller:"masonryController",compile:n};return t}).directive("masonryItem",function(){function n(){return{pre:function(n,t,r,i){void 0===i.config.masonryItem&&(i.config.masonryItem="["+r.$attr.masonryItem+"]")}}}var t={restrict:"A",require:"^masonry",priority:1,compile:n};return t}).directive("masonryAfterRender",["$timeout",function(n){"ngInject";function t(t,r,i,o){if(t.$last){var e=null;e=n(function(){o.initialize(),n.cancel(e)})}}var r={restrict:"A",require:"^masonry",priority:0,link:t};return r}]);